library(rgl)
library(tcltk2)
library(GGally)
library(tidyverse)
eigen(mat.cov)$values
autoval= eigen(mat.cov)$values # extraigo los autoval y autovec
autoval
autovec= eigen(mat.cov)$vectors
autovec
acp = prcomp(mat.cov,center= T,scale=T)#center=T pone media en cero.scale=T desvío estándar 1.
acp
acp = prcomp(mat.cov,center= T,scale=T)#center=T pone media en cero.scale=T desvío estándar 1.
acp
diag(mat.cov)/traza(mat.cov)# traza=fuanction(x) (sum(diag(x)))
porc = round(rbind('cada uno'=autoval/sum(autoval), 'acumulado'=cumsum(autoval)/sum(autoval)),3)
colnames(porc)= c('lambda1','lambda2')
porc
ggbiplot(chale.pca,choices=1:2,scale=1,pc.biplot=TRUE)# grafico de CP
library(ggbiplot)
ggbiplot(acp, choices=1:2,scale=1, pc.biplot=TRUE)
install.packages("remotes")
install.packages("remotes")
install.packages("remotes")
knitr::opts_chunk$set(echo = TRUE)
library(ggbiplot)
library(ggbiplot)
ggbiplot(acp, choices=1:2,scale=1, pc.biplot=TRUE)
library(ggbiplot)
ggbiplot(acp, choices=1:2,scale=1, pc.biplot=TRUE)
remotes::install_github("vqv/ggbiplot")
remotes::install_github("vqv/ggbiplot", force = TRUE)
library(ggbiplot)
ggbiplot(acp, choices=1:2,scale=1, pc.biplot=TRUE)
ggbiplot(chale.pca,choices=1:2,scale=1,pc.biplot=TRUE)# grafico de CP
ggbiplot(acp, choices=1:2,scale=1, pc.biplot=TRUE)
acp
chale.pca
biplot(acp)
biplot(x = acp, scale = 0, cex = 0.6, col = c("blue4", "brown3"))
biplot(x = acp, scale = 1, cex = 0.0, col = c("blue4", "brown3"))
biplot(x = acp, scale = 1, cex = 0.6, col = c("blue4", "brown3"))
biplot(x = acp, scale = 0, cex = 0.6, col = c("blue4", "brown3"))
biplot(x = acp, col = c("blue4", "brown3"))
biplot(x = acp)
biplot(x = acp, scale = 0, cex = 0.6, col = c("blue4", "brown3"))
biplot(x = acp)
x.pca.cor=prcomp(x,center = T,scale. = T)
x.pca.cor
R
x=matrix(c(3,5,10,6,6,12),ncol=2)
x
R=cor(x)
R
mat.cor= cor(matriz)
mat.cor
cp.mc= prcomp(mat.cor, center=T, scale. = T)
cp.mc
summary(cp.mc)
autove.mc=eigen(mat.cor)$vector
autoval.mc=eigen(mat.cor)$values
autove.mc
autoval.mc
autove.mc
cp.mc= prcomp(mat.cor, center=T, scale = T)
cp.mc
traza = function(mat){mat/ sum(diag(mat))}
traza = function(mat){ sum(diag(mat))}
traza(mat.cor)
porcentajes= round(rbind('cada.uno'= mat.cor/traza(mat.cor),  'acumulado'=cumsum/traza(mat.cor)) ,4)
mat.cor/traza(mat.cor)
val_r
autoval.mc
porcentajes= round(rbind('cada.uno'= autoval.mc/sum(mat.cor),  'acumulado'=cumsum(autova..mc)/sum(autoval.mc)) ,4)
porcentajes= round(rbind('cada.uno'= autoval.mc/sum(mat.cor),  'acumulado'=cumsum(autova.mc)/sum(autoval.mc)) ,4)
porcentajes= round(rbind('cada.uno'= autoval.mc/sum(mat.cor),  'acumulado'=cumsum(autoval.mc)/sum(autoval.mc)) ,4)
colnames(porcentajes)= ('lambda1', 'lambda2')
colnames(porcentajes)= c('lambda1', 'lambda2')
porcentajes
autove.mc
autoval.mc
porcentajes= round(rbind('cada.uno'= autoval.mc/sum(mat.cor),  'acumulado'=cumsum(autoval.mc)/sum(autoval.mc)) ,4)
porcentajes
sum(autoval.mc)
autoval.mc
porcentajes
porcentajes
porcentajes= round(rbind('cada.uno'= autoval.mc/sum(mat.cor),  'acumulado'=cumsum(autoval.mc)/sum(autoval.mc)) ,4)
colnames(porcentajes)= c('lambda1', 'lambda2')
porcentajes
x.pca.cor=prcomp(x,center = T,scale. = T)
x.pca.cor
val_r=eigen(R)$values
vec_r=eigen(R)$vectors
val_r
vec_r
mat.cor= cor(matriz)
cp.mc= prcomp(mat.cor, center=T, scale = T)
cp.mc
summary(cp.mc)
autove.mc=eigen(mat.cor)$vector
autoval.mc=eigen(mat.cor)$values
autove.mc
autoval.mc
traza = function(mat){ sum(diag(mat))}
traza(mat.cor)
porcentajes= round(rbind('cada.uno'= autoval.mc/sum(mat.cor),  'acumulado'=cumsum(autoval.mc)/sum(autoval.mc)) ,4)
colnames(porcentajes)= c('lambda1', 'lambda2')
porcentajes
R=cor(x)
R
x.pca.cor=prcomp(x,center = T,scale. = T)
x.pca.cor
val_r=eigen(R)$values
vec_r=eigen(R)$vectors
val_r
vec_r
sum(diag(R)) #Traza de la matriz de correlaciones R
porc_r=round(rbind("cada.uno"=(val_r)/sum(val_r),
"acumulado"=cumsum(val_r)/sum(val_r)),3)
colnames(porc_r)=c("lambda1","lambda2")
porc_r
matriz
x
cp.mc= prcomp(mat.cor, center=T, scale = T)
cp.mc
R=cor(x)
R
x.pca.cor=prcomp(x,center = T,scale. = T)
x.pca.cor
R
mat.cor
x
matriz
matriz=matrix(c(3, 6, 5, 6, 10, 12), ncol=3)
mat.cov=var(matriz) #primero mat cov
mat.cov
mat.cor=cor(matriz)
mat.cor=cor(matriz)
```{r}
autoval= eigen(mat.cov)$values # extraigo los autoval y autovec
autoval
autovec= eigen(mat.cov)$vectors
autoval= eigen(mat.cov)$values # extraigo los autoval y autovec
autoval
autovec= eigen(mat.cov)$vectors
autovec
acp = prcomp(mat.cov,center= T,scale=T)#center=T pone media en cero.scale=T desvío estándar 1.
acp
diag(mat.cov)/traza(mat.cov)# traza=fuanction(x) (sum(diag(x)))
summary(acp)# aca veo prop var total y contribucion porcentual
matriz=matrix(c(3, 6, 5, 6, 10, 12), ncol=2)
mat.cov=var(matriz) #primero mat cov
mat.cov
mat.cor=cor(matriz)
matriz=matrix(c(3, 6, 5, 6, 10, 12), ncol=2)
mat.cov=var(matriz) #primero mat cov
mat.cov
mat.cor=cor(matriz)
matriz
autoval= eigen(mat.cov)$values # extraigo los autoval y autovec
autoval
autovec= eigen(mat.cov)$vectors
autovec
acp = prcomp(mat.cov,center= T,scale=T)#center=T pone media en cero.scale=T desvío estándar 1.
acp
diag(mat.cov)/traza(mat.cov)# traza=fuanction(x) (sum(diag(x)))
summary(acp)# aca veo prop var total y contribucion porcentual
porc = round(rbind('cada uno'=autoval/sum(autoval), 'acumulado'=cumsum(autoval)/sum(autoval)),3)
colnames(porc)= c('lambda1','lambda2')
porc
porc_r
#############################################################################
# CLASE REPASO
a=c(1.3,0.9,1.1,0.95)
mean(a)
a=c(2,5,7,8,3)
median(a)
dif=a- mean(a)
a= c(1,0,3,7,11)
dif=a- mean(a)
mean(dif) # aproxima a 0
# dos tablas, una con variab indep otra con variab dep (Sexo, situacion laboral)
#n=100, 70 mujeres, 30 H,desempleado
#taba dep
dep= data.frame('M'= c(5,10), 'F'= c(1,2))
chisq.test(dep) #son dep
rownames(dep)=c('desempleado', 'trabajando')
mosaicplot(dep)
#indep
indep= data.frame('M'= c(5,44), 'F'= c(1,166))
chisq.test(indep) #son indep
rownames(indep)=c('desempleado', 'trabajando')
mosaicplot(indep)
#indep
indep= data.frame('M'= c(5,44), 'F'= c(1,166))
chisq.test(indep) #son indep
rownames(indep)=c('desempleado', 'trabajando')
mosaicplot(indep)
dep
# dos tablas, una con variab indep otra con variab dep (Sexo, situacion laboral)
#n=100, 70 mujeres, 30 H,desempleado
#taba dep
dep= data.frame('M'= c(5,10), 'F'= c(1,2))
chisq.test(dep) #son dep
# dos tablas, una con variab indep otra con variab dep (Sexo, situacion laboral)
#n=100, 70 mujeres, 30 H,desempleado
#taba dep
dep= data.frame('M'= c(5,10), 'F'= c(1,2))
chisq.test(dep) #son dep
rownames(dep)=c('desempleado', 'trabajando')
mosaicplot(dep)
# dos tablas, una con variab indep otra con variab dep (Sexo, situacion laboral)
#n=100, 70 mujeres, 30 H,desempleado
#taba dep
indep= data.frame('M'= c(5,10), 'F'= c(1,2))
chisq.test(indep) #son dep
rownames(indep)=c('desempleado', 'trabajando')
mosaicplot(indep)
#indep
dep= data.frame('M'= c(5,44), 'F'= c(1,166))
#indep
dep= data.frame('M'= c(5,44), 'F'= c(1,166))
chisq.test(dep) #son indep
rownames(dep)=c('desempleado', 'trabajando')
mosaicplot(dep)
#install.packages("RColorBrewer")
library(FactoClass)
a=c(2,5,7,8,3)
median(a)
dif=a- mean(a)
dif
dif=sum(a- mean(a))
dif
knitr::opts_chunk$set(echo = TRUE)
S1=c(3.3,4.4,4.9,4.9,3.9,4.2,4.7,5.1,4.6,4.5)
S2=c(4.6,4.5,5.0,4.0,4.5,5.2,4.9,5.5,4.8,5.3)
S3=c(6.7,5.8,5.0,4.8,5.3,6.2,5.0,6.4,5.9,5.4)
S4=c(6.3,6.0,6.7,5.5,6.6,6.1,5.3,6.5,6.3,6.8)
supl=cbind(S1,S2,S3,S4)
efic=data.frame("Suplemento"=factor(c(rep(1,10),rep(2,10),rep(3,10),rep(4,10))),
"Eficiencia"=c(S1,S2,S3,S4))
efic
efic
View(efic)
medias.sup=apply(efic,2,mean)
medias.sup
S1=c(3.3,4.4,4.9,4.9,3.9,4.2,4.7,5.1,4.6,4.5)
S2=c(4.6,4.5,5.0,4.0,4.5,5.2,4.9,5.5,4.8,5.3)
S3=c(6.7,5.8,5.0,4.8,5.3,6.2,5.0,6.4,5.9,5.4)
S4=c(6.3,6.0,6.7,5.5,6.6,6.1,5.3,6.5,6.3,6.8)
supl=cbind(S1,S2,S3,S4)
efic=data.frame("Suplemento"=factor(c(rep(1,10),rep(2,10),rep(3,10),rep(4,10))),
"Eficiencia"=c(S1,S2,S3,S4))
efic
medias.sup=apply(efic,2,mean)
View(efic)
medias.sup=apply(efic[,2],2,mean)
medias.sup=apply(efic[,2],2,mean)
medias.sup=apply(efic,2,mean)
sd.sup=apply(efic,2,mean)
S1=c(3.3,4.4,4.9,4.9,3.9,4.2,4.7,5.1,4.6,4.5)
S2=c(4.6,4.5,5.0,4.0,4.5,5.2,4.9,5.5,4.8,5.3)
S3=c(6.7,5.8,5.0,4.8,5.3,6.2,5.0,6.4,5.9,5.4)
S4=c(6.3,6.0,6.7,5.5,6.6,6.1,5.3,6.5,6.3,6.8)
supl=cbind(S1,S2,S3,S4)
efic=data.frame("Suplemento"=factor(c(rep(1,10),rep(2,10),rep(3,10),rep(4,10))),
"Eficiencia"=c(S1,S2,S3,S4))
efic
medias.sup=apply(efic,2,mean)
medias.sup
sd.sup=apply(efic,2,mean)
sd.sup
S1=c(3.3,4.4,4.9,4.9,3.9,4.2,4.7,5.1,4.6,4.5)
S2=c(4.6,4.5,5.0,4.0,4.5,5.2,4.9,5.5,4.8,5.3)
S3=c(6.7,5.8,5.0,4.8,5.3,6.2,5.0,6.4,5.9,5.4)
S4=c(6.3,6.0,6.7,5.5,6.6,6.1,5.3,6.5,6.3,6.8)
supl=cbind(S1,S2,S3,S4)
efic=data.frame("Suplemento"=factor(c(rep(1,10),rep(2,10),rep(3,10),rep(4,10))),
"Eficiencia"=c(S1,S2,S3,S4))
efic
medias.sup=apply(efic,2,mean)
medias.sup
sd.sup=apply(efic,2,mean)
sd.sup
medias.sup=apply(supl,2,mean)
medias.sup
sd.sup=apply(supl,2,mean)
sd.sup
medias.sup
sd.sup
sd.sup=apply(supl,2,sd)
sd.sup
medias.sup=apply(supl,2,mean)
medias.sup
sd.sup=apply(supl,2,sd)
sd.sup
resumen=cbind(medias.sup,sd.sup)
resumen
GrupoA=c(25,36,36,25,36,16,25,36,49,36,25)
GrupoB=c(121,36,36,64,36,81,49,25,64,49,121)
GrupoC=c(81,81,36,9,25,36,9,49,169,1,81)
GrupoD=c(25,25,36,25,36,25,25,25,25,25,25)
Tiempos=cbind(GrupoA,GrupoB,GrupoC,GrupoD)
tiempo=data.frame("Grupos"=factor(c(rep(1,11),rep(2,11),rep(3,11),rep(4,11))),
"Tiempos"=c(GrupoA,GrupoB,GrupoC,GrupoD))
tiempo
ggplot(tiempo,aes(x=Grupos,y=Tiempos,fill=Grupos))+geom_boxplot()
plott=ggplot(tiempo,aes(x=Grupos,y=Tiempos,fill=Grupos))+geom_boxplot()
libary(ggplot2)
plott=ggplot(tiempo,aes(x=Grupos,y=Tiempos,fill=Grupos))+geom_boxplot()
libary(ggplot2)
library(ggplot2)
plott=ggplot(tiempo,aes(x=Grupos,y=Tiempos,fill=Grupos))+geom_boxplot()
plott
library(readxl) ##Permite leer archivos xlsx
library(ggplot2) ##Paquete para confeccionar dibujos
library(ggrepel) ##Paquete que manipula etiquetas para gráficos
library(plotrix) ##Paquete para gráficos requerido para la libreria smacof
library(smacof)  ##Paquete para MDS basado en la minimización del stress
install.packages("smacof")
install.packages("smacof")
install.packages("smacof")
install.packages("smacof")
install.packages("smacof")
install.packages("smacof")
install.packages("smacof")
install.packages("smacof")
install.packages("smacof")
library(readxl) ##Permite leer archivos xlsx
library(ggplot2) ##Paquete para confeccionar dibujos
library(ggrepel) ##Paquete que manipula etiquetas para gráficos
library(plotrix) ##Paquete para gráficos requerido para la libreria smacof
library(smacof)  ##Paquete para MDS basado en la minimización del stress
tipo2= c(0.18, 0.2,0.33, 0.3, 0.23 ,0.32,0.16, 0.2,0.19, 0.19,0.3, 0.22,0.21, 0.27,0.2, 0.24,0.16, 0.29,0.21, 0.27)
(a) Satisfacen los datos el supuesto de normalidad?
(b) Si la respuesta es afirmativa aplique un test basado en este supuesto para analizar si los tiempos de las dos sucursales son iguales o no. Si la
respuesta es negativa realice una transformación de Box & Cox para normalizar los datos y aplique la prueba a los datos transformados.
(c) Aplique una prueba no paramétrica y compare los resultados con los
obtenidos en el item anterior.
install.packages( "data.table", dependencies= TRUE )
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ',
'devtools', 'uuid', 'digest'))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
instalamos librerías
library(factoextra) # para método de Pearson y heatmaps
library(igraph)
library(tidygraph)
library(ggraph)
library(dplyr) # para manejar bases
library(tidyverse)
library(cluster)
library(mclust)  #ejercicio 3
library("clValid") #validez de los algoritmos
data(USArrests)
datos <- scale(USArrests, center = TRUE, scale = TRUE)
#instalamos librerias
library(FactoMineR)
library(foreign)
library(psych)
library(knitr)
library(xtable)
library(dendextend)
#suppressPackageStartupMessages(library(dendextend))
if (!require('devtools')) install.packages('devtools');
devtools::install_github('talgalili/dendextendRcpp')
library(dendextendRcpp)
library(ggplot2)
library(ggfortify)
#suppressPackageStartupMessages(library(dendextendRcpp))
#suppressPackageStartupMessages(library(ggplot2))
#suppressPackageStartupMessages(library(ggfortify))
library(corrplot)
if (!require('Stuff')) install.packages('Stuff');
devtools::install_github('talgalili/Stuff')
library(Stuff)
suppressPackageStartupMessages(library(dplyr))
library(broom)
setwd("E:/Documentos/Calzolari/AID-CHAN/")
library(readxl)
install.packages("Stuff")
#instalamos librerias
library(FactoMineR)
library(foreign)
library(psych)
library(knitr)
library(xtable)
library(dendextend)
if (!require('devtools')) install.packages('devtools');
#suppressPackageStartupMessages(library(dendextend))
library('devtools')
devtools::install_github('talgalili/dendextendRcpp')
library(dendextendRcpp)
install.packages("dendextendRcpp")
library(dendextendRcpp)
devtools::install_github('talgalili/dendextendRcpp')
library(dendextendRcpp)
library(ggplot2)
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
#suppressPackageStartupMessages(library(dendextendRcpp))
#suppressPackageStartupMessages(library(ggplot2))
#suppressPackageStartupMessages(library(ggfortify))
library(corrplot)
if (!require('Stuff')) install.packages('Stuff');
#instalamos librerias
install.packages("installr", dependencies = TRUE)
library(installr)
updateR()
if (!require('devtools')) install.packages('devtools');
library(corrplot)
library(rgl)
library(tcltk2)
library(GGally)
library(tidyverse)
library(xlsx)
library(gridExtra) # Paquete para acomodar gráficos simultáneos
library(corpcor) #Paquete que incluye una estimación eficiente de covarianza y correlación
library(Hotelling) # Paquete que implementa el test de Hotelling
library(car) # Paquete con funciones que acompañan regresión aplicada
library(mvnormtest)# Paquete que generaliza el test de Shapiro-Wilk para el caso multivariado
library(biotools) # para análisis de conglomerados y de discriminante
library(corrplot) # Paquete para la visualización gráfica de matrices
library(klaR) # Paquete con funciones para clasificación y visualización
library(vcd) # clasificacion con regresión logística
library(boot) #curva roc
library(ROCR) #curva roc
library(nnet)
library(ada)
library(MASS)
library(e1071)
library(ggpubr)
library(carData) # Libreria para base de datos
library(ltm) # Para la correlación entre una variable cuantitativa y otra dicotomica.
library(vcd) # Para la correlación entre dos variables dicotomicas o nominales
library(readxl) ##Permite leer archivos xlsx
library(ggplot2) ##Paquete para confeccionar dibujos
library(ggrepel) ##Paquete que manipula etiquetas para gráficos
library(plotrix) ##Paquete para gráficos requerido para la libreria smacof
library(smacof)  ##Paquete para MDS basado en la minimización del stress
library(UsingR)
library(pgirmess)#pruebas a posteriori de kruskal wallis
library(MASS)
library(car)
library(grDevices) # Equipos grï¿½ficos y soporte para la base y la red de grï¿½ficos
library(tcltk)
library(aplpack)
library(rgl)
library(tcltk2)
library(GGally)
library(tidyverse)
library(xlsx)
library(gridExtra) # Paquete para acomodar gráficos simultáneos
library(corpcor) #Paquete que incluye una estimación eficiente de covarianza y correlación
library(Hotelling) # Paquete que implementa el test de Hotelling
library(car) # Paquete con funciones que acompañan regresión aplicada
library(mvnormtest)# Paquete que generaliza el test de Shapiro-Wilk para el caso multivariado
library(biotools) # para análisis de conglomerados y de discriminante
library(corrplot) # Paquete para la visualización gráfica de matrices
library(klaR) # Paquete con funciones para clasificación y visualización
library(vcd) # clasificacion con regresión logística
library(boot) #curva roc
library(ROCR) #curva roc
library(nnet)
library(ada)
library(MASS)
library(e1071)
library(ggpubr)
library(carData) # Libreria para base de datos
library(ltm) # Para la correlación entre una variable cuantitativa y otra dicotomica.
library(vcd) # Para la correlación entre dos variables dicotomicas o nominales
library(readxl) ##Permite leer archivos xlsx
library(ggplot2) ##Paquete para confeccionar dibujos
library(ggrepel) ##Paquete que manipula etiquetas para gráficos
library(plotrix) ##Paquete para gráficos requerido para la libreria smacof
library(smacof)  ##Paquete para MDS basado en la minimización del stress
library(UsingR)
library(pgirmess)#pruebas a posteriori de kruskal wallis
library(MASS)
library(car)
plot(x**2)
q()
source("~/.active-rstudio-document")
View(tabla_veredictos)
View(veredicto)
tiros_total
tasa_eleccion_correcta
source("C:/Users/Sebastian/OneDrive/Escritorio/DataMining/DMEco/labo/src/CazaTalentos/intento_A_01.r")
veredicto
source("C:/Users/Sebastian/OneDrive/Escritorio/DataMining/DMEco/labo/src/CazaTalentos/intento_A_01.r")
aciertos1
resultado1
source("C:/Users/Sebastian/OneDrive/Escritorio/DataMining/DMEco/labo/src/CazaTalentos/intento_B.r")
View(veredicto)
View(tabla_veredictos)
tiros_total
tasa_eleccion_correcta
source("C:/Users/Sebastian/OneDrive/Escritorio/DataMining/DMEco/labo/src/CazaTalentos/basket_07.r")
source("~/.active-rstudio-document")
source("C:/Users/Sebastian/OneDrive/Escritorio/DataMining/DMEco/labo/src/rpart/Meier321_rpart_BO.r")
source("C:/Users/Sebastian/OneDrive/Escritorio/DataMining/DMEco/labo/src/rpart/Meier321_rpart_BO.r")
